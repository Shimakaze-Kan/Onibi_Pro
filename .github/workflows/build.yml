name: Build .NET and Angular apps

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore and build Core Monolith
      run: |
        dotnet restore
        dotnet build --no-restore -c Release

    - name: Restore and build Communication microservice
      run: |
        cd Onibi_Pro.Communication/
        dotnet restore Onibi_Pro.Communication.sln
        dotnet build Onibi_Pro.Communication.sln --no-restore -c Release

    - name: Setup Node.js for Angular
      uses: actions/setup-node@v4.0.1
      with:
        node-version: '18.x'

    - name: Install npm dependencies and build Angular project
      run: |
        cd Onibi_Pro/ClientApp/
        npm install
        npm run build
    
    - name: Install PowerShell
      run: |
        # Instalacja PowerShell Core
        wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell

    - name: Create or checkout 'badges' branch
      run: |
        git fetch --all
        git checkout badges || git checkout -b badges
        git merge origin/master --no-edit

    - name: Run PowerShell Script
      run: |
        $extensions = @('*.cs', '*.css', '*.scss', '*.html', '*.sql', '*.ts')
        $excludeFolders = @("bin", "obj", "node_modules", "migrations")
        $gitFiles = git ls-files
        $filteredFiles = $gitFiles | Where-Object {
            $path = $_
            $include = $false
            foreach ($extension in $extensions) {
                if ($path -like $extension) {
                    $include = $true
                    break
                }
            }
            return $include
        }
        $filteredFiles = $filteredFiles | Where-Object {
            $path = $_
            foreach ($folder in $excludeFolders) {
                if ($path -like "*/$folder/*") {
                    return $false
                }
            }
            return $true
        }
        $lineCount = 0
        foreach ($file in $filteredFiles) {
            $lineCount += (Get-Content $file | Measure-Object -Line).Lines
        }
        $url = "https://img.shields.io/badge/Lines%20of%20Code-$lineCount-blue"
        $response = Invoke-WebRequest $url
        $response.Content | Out-File "imgs/loc-badge.svg"
        Write-Host "Image loc-badge.svg, saved"
      shell: pwsh

    - name: Commit and push badge to 'badges' branch
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add imgs/loc-badge.svg
        git commit -m "Updated LOC badge" || echo "No changes to commit"
        git push origin badges
